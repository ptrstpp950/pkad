pipeline {
    agent none
    environment {
        DOCKER_REGISTRY = "poznajkubernetes.azurecr.io"
        IMAGE_NAME = "pkad_jenkins"
        IMAGE_TAG = "null_13" //"${env.BRANCH_NAME}_${BUILD_ID}"
        CI_APP_NAME = "pkad_jenkins"
    }
    stages {
        /*stage('build') {
            agent { node { label 'docker' }}
            steps{
                script{
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker_registry_credentials') {
                        def customImage = docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                        // Push thecontainer to the custom Registry
                        customImage.push()
                    }
                }
            }
        }*/
        stage('List pods') {
            agent {
                docker {
                    image 'poznajkubernetes/kubectl:v1.14'
                    args '-v /tmp:/tmp --entrypoint='
                }
            }
            steps{
                withKubeConfig(credentialsId: 'jenkins-kubeconfig', namespace: 'default') {
                    withCredentials([usernamePassword(
                            credentialsId: "docker_registry_credentials",
                            usernameVariable: 'DOCKER_USER',
                            passwordVariable: 'DOCKER_PASSWORD')]){

                        sh 'KUBECTL_NAMESPACE="ingress-basic"'

                        sh '''
                        kubectl create secret docker-registry jenkins-registry
                                --docker-server=$DOCKER_REGISTRY
                                --docker-username=$DOCKER_USER
                                --docker-password=$DOCKER_PASSWORD
                                -o yaml --dry-run | kubectl apply -f -
                        '''

                        sh 'envsubst < deployment/deployment-template.yaml > deployment/deployment.yaml'
                        sh 'cat deployment/deployment.yaml'
                        sh 'kubectl get pods'
                    }
                }
            }
        }
    }
}
